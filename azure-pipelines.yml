# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

stages:
- stage: Webclient
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
      demands: npm
  
    steps:
    - task: Npm@1
      displayName: 'npm install'
      inputs:
        workingDir: 'webclient'
        verbose: false
    
    - task: Npm@1
      displayName: 'npm run build'
      inputs:
       workingDir: 'webclient'
       command: custom
       verbose: false
       customCommand: 'run build'

    - task: CopyFiles@2
      displayName: 'Copy Files to Stageing Directory'
      inputs: 
         SourceFolder: '$(System.DefaultWorkingDirectory)/webclient/build'
         TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        ArtifactName: 'Webclient'
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'

- stage: Function
  dependsOn: []
  jobs:
    - job: Build
      pool: 
        vmImage: 'windows-latest'
      
      steps:
        - task: DotNetCoreCLI@2
          displayName: 'Dotnet Restore'
          inputs: 
            command: restore
            projects: 'Function/*.csproj'

        - task: DotNetCoreCLI@2
          displayName: 'Dotnet Build'
          inputs: 
            command: build
            projects: 'Function/*.csproj'
            arguments: '--configuration Release'

        - task: DotNetCoreCLI@2
          displayName: 'Dotnet Publish'
          inputs:
            command: publish
            arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'
            projects: 'Function/*.csproj'
            publishWebProjects: false
            modifyOutputPath: true
            zipAfterPublish: true

        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'Function'

- stage: 'ARMTemplate'
  dependsOn: []
  jobs:
    - job: Build
      pool: 
        vmImage: 'ubuntu-latest'
      steps:
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(System.DefaultWorkingDirectory)/ARM/'
            ArtifactName: 'ARM'
